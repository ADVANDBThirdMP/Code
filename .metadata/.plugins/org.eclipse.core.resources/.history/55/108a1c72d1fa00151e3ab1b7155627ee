import java.io.*;
import java.net.*;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;

import javax.sql.rowset.CachedRowSet;

import com.sun.rowset.CachedRowSetImpl;

class UDPServer {

	private DBConnect db = new DBConnect();
	private DatagramSocket serverSocket;
	private byte[] receiveData = new byte[1024];
	private byte[] sendResultSet = new byte[1024];
	private byte[] sendHandShake = new byte[1024];
	private byte[] sendColumnCount = new byte[1024];

	private String nothing;
	private DatagramPacket receivePacket;

	public UDPServer() throws Exception {
		// Creates a socket for receiving packets
		serverSocket = new DatagramSocket(9876);
		receivePacket = new DatagramPacket(receiveData, receiveData.length);
		OpenServer();
	}

	public void OpenServer() throws Exception {
		while (true) {

			// Created socket receives packet and execute query
			serverSocket.receive(receivePacket);

			String queryFromClient = new String(receivePacket.getData(), 0, receivePacket.getLength());
			System.out.println("Yung putang query: " + queryFromClient);

			if (queryFromClient.equals("select max(id) from hpq_alp")) {
				System.out.println("magkamuka sila");
			} else
				System.out.println("di sila magkamuka");

			// queryFromClient = "Select max(id) from hpq_alp";
			ResultSet resultSet = db.executeQuery(queryFromClient);

			System.out.println("result in udp server" + resultSet);

			// Using received packet I get address and port number
			InetAddress IPAddress = receivePacket.getAddress();
			int port = receivePacket.getPort();

			// Send back sentence as acknowledgement/reply
			String sendBackHandshake = "I accepted handshake";
			sendHandShake = sendBackHandshake.getBytes();

			

			// gives back the resultset to client
			ResultSetMetaData rsmd = resultSet.getMetaData();

			sendColumnCount = null;
			String columnCount = Integer.toString(rsmd.getColumnCount());
			
			String dump = "wala";
//			System.out.println("\nTANGINA NYONG MEMBERS  " + columnCount);
//			sendColumnCount = (columnCount.getBytes());
//			System.out.println("\nTANGINA NYONG MEMBERS part 2  " + sendColumnCount);


			System.out.println("\nTANGINA NYONG MEMBERS  " + columnCount);
			sendColumnCount = (dump.getBytes(columnCount));
			System.out.println("\nTANGINA NYONG MEMBERS part 2  " + sendColumnCount);

			
			ResultSetMetaData metadata = resultSet.getMetaData();
			int numberOfColumns = metadata.getColumnCount();

			ArrayList<String> arrayList = new ArrayList<String>();
			while (resultSet.next()) {
				int i = 1;
				while (i <= numberOfColumns) {
					arrayList.add(resultSet.getString(i++));
				}
			}

			// write to byte array
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DataOutputStream out = new DataOutputStream(baos);
			for (String element : arrayList) {
				out.writeUTF(element);
			}
			byte[] bytes = baos.toByteArray();

			DatagramPacket returnHandShake = new DatagramPacket(sendHandShake, sendHandShake.length, IPAddress, port);
			serverSocket.send(returnHandShake);

			DatagramPacket returnSizeResultSetArrayinBytes = new DatagramPacket(sendColumnCount, sendColumnCount.length,
					IPAddress, port);
			serverSocket.send(returnSizeResultSetArrayinBytes);

			DatagramPacket returnResultSetArrayinBytes = new DatagramPacket(bytes, bytes.length, IPAddress, port);
			serverSocket.send(returnResultSetArrayinBytes);

		}
	}

}
