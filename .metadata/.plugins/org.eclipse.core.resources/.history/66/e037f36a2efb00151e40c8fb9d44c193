import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import com.sun.javafx.collections.MappingChange.Map;

import javafx.scene.control.ScrollPane;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import net.miginfocom.swing.MigLayout;

public class RightSplit implements ActionListener {

	JPanel jPanel = new JPanel();

	private DBConnect db = new DBConnect();
	private MainGUI mainGUI;

	// transactionstable
	private JTabbedPane jTabbedPane = new JTabbedPane();
	private ArrayList<String> transactions = new ArrayList<String>();
	private JTable transactionsTable = new JTable();
	private Object transaction_column_names[] = { "Transactions" };
	private DefaultTableModel transactionsTableModel = new DefaultTableModel(transaction_column_names, 0);
	private JScrollPane transactionsTablePane;
	private Object result_column_names[] = { "No Transactions yet" };
	private DefaultTableModel resultsTableModel = new DefaultTableModel(result_column_names, 0);

	// buttons
	private final JButton btnCommit = new JButton("COMMIT");
	private final JButton btnRollback = new JButton("ROLLBACK");
	private JButton btnAddTab = new JButton("Add transaction");
	private JButton btnDelTab = new JButton("Delete transaction");

	private ActListener act = new ActListener();

	private JTextField txtNewTransactionsName = new JTextField();

	// menus
	private JMenuBar jMenuBar = new JMenuBar();

	private JMenu transaction = new JMenu("Transactions");
	private JMenu run = new JMenu("Run");
	private JMenu file = new JMenu("File");

	private JMenuItem startClient = new JMenuItem("Start Client");
	private JMenuItem startServer = new JMenuItem("Start Server");

	private JMenuItem closeAll = new JMenuItem("Close All");
	private JMenuItem newTransaction = new JMenuItem("New Transaction");
	private JMenuItem deleteTransaction = new JMenuItem("Delete Transaction");

	private JMenuItem runSelected = new JMenuItem("Run");
	private JMenuItem runAll = new JMenuItem("Run All");

	private UDPClient udpClient;
	private UDPServer udpServer;

	private HashMap<String, ArrayList> receivedTable;

	private final HashMap<String, JTextArea> areas = new HashMap<String, JTextArea>();
	private JTextArea txtResult;

	public RightSplit(MainGUI mainGUI) throws Exception {

		udpClient = new UDPClient();
		this.mainGUI = mainGUI;

		jPanel.setLayout(null);
		jPanel.setSize(1100, 600);

		// for the transactions table
		transactionsTable.setModel(transactionsTableModel);
		transactionsTablePane = new JScrollPane(transactionsTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		// default transactions
		JPanel p = new JPanel();
		p.setLayout(null);
		JTextArea tArea = new JTextArea("Transactions here");
		tArea.setLocation(10, 0);
		tArea.setLineWrap(true);
		tArea.setSize(new Dimension(773, 196));

		p.add(tArea);

		jTabbedPane.add("Default", p);
		areas.put("Default", tArea);

		transactions.add("Default");

		populateTransactionsTable();

		// populate transactions table based on transactions arraylist
		populateTransactionsTable();

		btnAddTab.setBounds(805, 54, 115, 23);
		btnDelTab.setBounds(805, 279, 251, 23);
		jTabbedPane.setBounds(7, 33, 788, 235);
		btnRollback.setBounds(405, 279, 390, 52);
		transactionsTablePane.setBounds(805, 88, 251, 180);
		btnCommit.setBounds(7, 279, 390, 52);

		jPanel.add(btnAddTab);

		jPanel.add(btnRollback);
		jPanel.add(btnDelTab);
		jPanel.add(btnCommit);
		jPanel.add(jTabbedPane);

		jPanel.add(transactionsTablePane);
		jPanel.add(transactionsTablePane, "cell 0 2 3 1,grow");

		jPanel.add(jMenuBar);

		txtNewTransactionsName.setBounds(932, 54, 124, 23);
		jPanel.add(txtNewTransactionsName);
		txtNewTransactionsName.setColumns(10);
		jMenuBar.setBounds(0, 0, 1100, 21);

		// for file
		file.add(startClient);
		file.add(startServer);

		// for transaction
		transaction.add(closeAll);
		transaction.add(newTransaction);
		transaction.add(deleteTransaction);

		// for run
		run.add(runAll);
		run.add(runSelected);

		jMenuBar.add(file);
		jMenuBar.add(transaction);
		jMenuBar.add(run);

		txtResult = new JTextArea();
		txtResult.setBounds(17, 342, 1039, 247);
		jPanel.add(txtResult);

		btnAddTab.addActionListener(act);
		btnDelTab.addActionListener(act);
		btnCommit.addActionListener(act);

	}

	public JPanel getJPanel() {
		return jPanel;
	}

	// populates/refreshes table based on array list
	public void populateTransactionsTable() {
		transactionsTableModel = new DefaultTableModel(transaction_column_names, 0);

		for (int i = 0; i < transactions.size(); i++) {
			transactionsTableModel.addRow(new Object[] { transactions.get(i) });
		}
		transactionsTableModel.fireTableDataChanged();

		transactionsTable.setModel(transactionsTableModel);
		transactionsTablePane.repaint();
		jPanel.repaint();
		jPanel.revalidate();
	}

	public void addTransactions(String tab) {
		String newTabName = tab;
		JPanel p = new JPanel();
		p.setLayout(null);
		JTextArea tArea = new JTextArea("Transactions here");
		tArea.setLocation(10, 0);
		tArea.setLineWrap(true);
		tArea.setSize(new Dimension(773, 196));

		p.add(tArea);

		jTabbedPane.add(newTabName, p);
		areas.put(newTabName, tArea);

		transactions.add(newTabName);

		populateTransactionsTable();

	}

	// adds transactions to arraylist then refreshses table
	// public void addTransactions() {
	//
	// JPanel p = new JPanel();
	// JTextArea tArea = new JTextArea("Transactions here");
	// p.add(tArea);
	// jTabbedPane.add(txtNewTransactionsName.getText(), p);
	// areas.put(txtNewTransactionsName.getText(), tArea);
	//
	// transactions.add(txtNewTransactionsName.getText());
	//
	// populateTransactionsTable();
	// }

	// deletes transactions and refreshes table
	public void deleteTransactions() {
		int row = transactionsTable.getSelectedRow();
		int column = transactionsTable.getColumnCount();

		int index = jTabbedPane.indexOfTab(transactionsTable.getValueAt(row, 0).toString());
		if (index >= 0) {
			jTabbedPane.removeTabAt(index);
		}
		transactions.remove(transactionsTable.getValueAt(row, 0).toString());
		populateTransactionsTable();
	}

	private class ActListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == btnAddTab) {
				addTransactions(txtNewTransactionsName.getText());
			}

			if (e.getSource() == btnDelTab) {
				deleteTransactions();
			}
			if (e.getSource() == btnCommit) {
				System.out.println(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()));
				// System.out.println(areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText().toString());

				System.out.println(
						areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText().toString());

				DataInputStream dataInputStream = null;
				DataInputStream dataInputStream1 = null;


				//
				try {
					udpClient.handShakeAndGetQuery(
							areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText());
					dataInputStream1 = udpClient.getTableColumnNames();

					System.out.println("COULMNS: " + udpClient.getColumnCount());
					System.out.println("NAGHANDSHAKE BA: " + udpClient.getHandShake());

					int i1 = 0;
					String pk = "";
					ArrayList<Object> dataPK = new ArrayList<Object>();

					try {
						txtResult.setText("");
						while (dataInputStream1.available() > 0) {

							String value = "";

							if (i1 == 0) {
								pk = dataInputStream1.readUTF();
								txtResult.append("\n");
								txtResult.append(String.format("%-25s\t" + " ", pk));

							} else {
								value = dataInputStream1.readUTF();
								txtResult.append(String.format("%-25s\t" + " ", value));

							}


							i1++;
							if (i1 == udpClient.getColumnCount()) {
								i1 = 0;
								dataPK = new ArrayList<Object>();
							}

						
						}
					} catch (EOFException e1) {
						// TODO Auto-generated catch block
					}

					System.out.println(receivedTable.toString());

				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				//
				
				try {
					udpClient.handShakeAndGetQuery(
							areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText());
					dataInputStream = udpClient.getTable();

					System.out.println("COULMNS: " + udpClient.getColumnCount());
					System.out.println("NAGHANDSHAKE BA: " + udpClient.getHandShake());

					receivedTable = new HashMap<String, ArrayList>();
					int i = 0;
					String pk = "";
					ArrayList<Object> dataPK = new ArrayList<Object>();

					try {
						txtResult.setText("");
						while (dataInputStream.available() > 0) {

							String value = "";

							if (i == 0) {
								pk = dataInputStream.readUTF();
								txtResult.append("\n");
								txtResult.append(String.format("%-25s\t" + " ", pk));

							} else {
								value = dataInputStream.readUTF();
								dataPK.add(value);
								txtResult.append(String.format("%-25s\t" + " ", value));

							}

							// HashMap<String, ArrayList> receivedTable = new
							// HashMap<String, ArrayList>();

							// receivedTable.put(pk, dataPK);

							/*
							 * for(int i = 1; i<=udpClient.getColumnCount()-1;
							 * i++){ String body = dataInputStream.readUTF();
							 * 
							 * ArrayList<Object> dataBody = new
							 * ArrayList<Object>(); dataBody.add(body);
							 * receivedTable.put(pk, dataBody); }
							 * 
							 */
							// for (int i = 0; i < products.size(); i++) {
							// resultsTableModel.add((new Object[] {element});
							// }

							i++;
							if (i == udpClient.getColumnCount()) {
								i = 0;
								receivedTable.put(pk, dataPK);
								dataPK = new ArrayList<Object>();
							}

							for (int j = 0; j < receivedTable.size(); j++) {

								// resultsTableModel.addRow(new Object[]
								// {receivedTable.get(pk).toString()});
							}
						}
					} catch (EOFException e1) {
						// TODO Auto-generated catch block
					}

					System.out.println(receivedTable.toString());

				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

			}

		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub

	}
}

////
// import javax.swing.*;
// import javax.swing.table.DefaultTableModel;
//
// import com.sun.javafx.collections.MappingChange.Map;
//
// import javafx.scene.control.ScrollPane;
//
// import java.awt.*;
// import java.awt.event.ActionEvent;
// import java.awt.event.ActionListener;
// import java.awt.event.MouseAdapter;
// import java.io.DataInputStream;
// import java.io.EOFException;
// import java.io.IOException;
// import java.util.ArrayList;
// import java.util.HashMap;
//
// import net.miginfocom.swing.MigLayout;
//
// public class RightSplit implements ActionListener {
//
// JPanel jPanel = new JPanel();
//
// private DBConnect db = new DBConnect();
// private MainGUI mainGUI;
//
// // transactionstable
// private JTabbedPane jTabbedPane = new JTabbedPane();
// private ArrayList<String> transactions = new ArrayList<String>();
// private JTable transactionsTable = new JTable();
// private Object transaction_column_names[] = { "Transactions" };
// private DefaultTableModel transactionsTableModel = new
//// DefaultTableModel(transaction_column_names, 0);
// private JScrollPane transactionsTablePane;
// private Object result_column_names[] = { "No Transactions yet" };
// private DefaultTableModel resultsTableModel = new
//// DefaultTableModel(result_column_names, 0);
//
// // buttons
// private final JButton btnCommit = new JButton("COMMIT");
// private final JButton btnRollback = new JButton("ROLLBACK");
// private JButton btnAddTab = new JButton("Add transaction");
// private JButton btnDelTab = new JButton("Delete transaction");
//
// private ActListener act = new ActListener();
//
// private JTextField txtNewTransactionsName = new JTextField();
//
// // menus
// private JMenuBar jMenuBar = new JMenuBar();
//
// private JMenu transaction = new JMenu("Transactions");
// private JMenu run = new JMenu("Run");
// private JMenu file = new JMenu("File");
//
// private JMenuItem startClient = new JMenuItem("Start Client");
// private JMenuItem startServer = new JMenuItem("Start Server");
//
// private JMenuItem closeAll = new JMenuItem("Close All");
// private JMenuItem newTransaction = new JMenuItem("New Transaction");
// private JMenuItem deleteTransaction = new JMenuItem("Delete Transaction");
//
// private JMenuItem runSelected = new JMenuItem("Run");
// private JMenuItem runAll = new JMenuItem("Run All");
//
// private UDPClient udpClient;
// private UDPServer udpServer;
//
// private HashMap<String, ArrayList> receivedTable;
//
// private final HashMap<String, JTextArea> areas = new HashMap<String,
//// JTextArea>();
//
// public RightSplit(MainGUI mainGUI) throws Exception {
//
// udpClient = new UDPClient();
// this.mainGUI = mainGUI;
//
// jPanel.setLayout(null);
// jPanel.setSize(1100, 600);
//
// // for the transactions table
// transactionsTable.setModel(transactionsTableModel);
// transactionsTablePane = new JScrollPane(transactionsTable,
//// JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
// JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//
//
//
// // default transactions
// JPanel p = new JPanel();
// p.setLayout(null);
// JTextArea tArea = new JTextArea("Transactions here");
// tArea.setLocation(10, 0);
// tArea.setLineWrap(true);
// tArea.setSize(new Dimension(773, 196));
//
// p.add(tArea);
//
// jTabbedPane.add("Default", p);
// areas.put("Default", tArea);
//
// transactions.add("Default");
//
// populateTransactionsTable();
//
// // populate transactions table based on transactions arraylist
// populateTransactionsTable();
//
// btnAddTab.setBounds(805, 54, 115, 23);
// btnDelTab.setBounds(805, 279, 251, 23);
// jTabbedPane.setBounds(7, 33, 788, 235);
// btnRollback.setBounds(405, 279, 390, 52);
// transactionsTablePane.setBounds(805, 88, 251, 180);
// btnCommit.setBounds(7, 279, 390, 52);
//
// jPanel.add(btnAddTab);
//
// jPanel.add(btnRollback);
// jPanel.add(btnDelTab);
// jPanel.add(btnCommit);
// jPanel.add(jTabbedPane);
//
// jPanel.add(transactionsTablePane);
// jPanel.add(transactionsTablePane, "cell 0 2 3 1,grow");
//
// jPanel.add(jMenuBar);
//
// txtNewTransactionsName.setBounds(932, 54, 124, 23);
// jPanel.add(txtNewTransactionsName);
// txtNewTransactionsName.setColumns(10);
// jMenuBar.setBounds(0, 0, 1100, 21);
//
// // for file
// file.add(startClient);
// file.add(startServer);
//
// // for transaction
// transaction.add(closeAll);
// transaction.add(newTransaction);
// transaction.add(deleteTransaction);
//
// // for run
// run.add(runAll);
// run.add(runSelected);
//
// jMenuBar.add(file);
// jMenuBar.add(transaction);
// jMenuBar.add(run);
//
// JTextArea textArea = new JTextArea();
// textArea.setBounds(17, 342, 1039, 247);
// jPanel.add(textArea);
//
// btnAddTab.addActionListener(act);
// btnDelTab.addActionListener(act);
// btnCommit.addActionListener(act);
//
// }
//
// public JPanel getJPanel() {
// return jPanel;
// }
//
// // populates/refreshes table based on array list
// public void populateTransactionsTable() {
// transactionsTableModel = new DefaultTableModel(transaction_column_names, 0);
//
// for (int i = 0; i < transactions.size(); i++) {
// transactionsTableModel.addRow(new Object[] { transactions.get(i) });
// }
// transactionsTableModel.fireTableDataChanged();
//
// transactionsTable.setModel(transactionsTableModel);
// transactionsTablePane.repaint();
// jPanel.repaint();
// jPanel.revalidate();
// }
//
// public void addTransactions(String tab) {
// String newTabName = tab;
// JPanel p = new JPanel();
// p.setLayout(null);
// JTextArea tArea = new JTextArea("Transactions here");
// tArea.setLocation(10, 0);
// tArea.setLineWrap(true);
// tArea.setSize(new Dimension(773, 196));
//
// p.add(tArea);
//
// jTabbedPane.add(newTabName, p);
// areas.put(newTabName, tArea);
//
// transactions.add(newTabName);
//
// populateTransactionsTable();
//
// }
//
// // adds transactions to arraylist then refreshses table
// // public void addTransactions() {
// //
// // JPanel p = new JPanel();
// // JTextArea tArea = new JTextArea("Transactions here");
// // p.add(tArea);
// // jTabbedPane.add(txtNewTransactionsName.getText(), p);
// // areas.put(txtNewTransactionsName.getText(), tArea);
// //
// // transactions.add(txtNewTransactionsName.getText());
// //
// // populateTransactionsTable();
// // }
//
// // deletes transactions and refreshes table
// public void deleteTransactions() {
// int row = transactionsTable.getSelectedRow();
// int column = transactionsTable.getColumnCount();
//
// int index = jTabbedPane.indexOfTab(transactionsTable.getValueAt(row,
//// 0).toString());
// if (index >= 0) {
// jTabbedPane.removeTabAt(index);
// }
// transactions.remove(transactionsTable.getValueAt(row, 0).toString());
// populateTransactionsTable();
// }
//
// private class ActListener implements ActionListener {
// public void actionPerformed(ActionEvent e) {
// if (e.getSource() == btnAddTab) {
// addTransactions(txtNewTransactionsName.getText());
// }
//
// if (e.getSource() == btnDelTab) {
// deleteTransactions();
// }
// if (e.getSource() == btnCommit) {
// System.out.println(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()));
// //
//// System.out.println(areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText().toString());
//
// System.out.println(
// areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText().toString());
//
// DataInputStream dataInputStream = null;
//
// try {
// udpClient.handShakeAndGetQuery(
// areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText());
// dataInputStream = udpClient.getTable();
//
// System.out.println("COULMNS: " + udpClient.getColumnCount());
// System.out.println("NAGHANDSHAKE BA: "+ udpClient.getHandShake());
//
//
// receivedTable = new HashMap<String, ArrayList>();
// int i = 0;
// String pk = "";
// ArrayList<Object> dataPK = new ArrayList<Object>();
//
// try {
// while (dataInputStream.available() > 0) {
//
// String value = "";
//
// if(i == 0){
// pk = dataInputStream.readUTF();
// }
// else{
// value = dataInputStream.readUTF();
// dataPK.add(value);
// }
//
//
//
//// HashMap<String, ArrayList> receivedTable = new HashMap<String,
//// ArrayList>();
//
// //receivedTable.put(pk, dataPK);
//
//
// /* for(int i = 1; i<=udpClient.getColumnCount()-1; i++){
// String body = dataInputStream.readUTF();
//
// ArrayList<Object> dataBody = new ArrayList<Object>();
// dataBody.add(body);
// receivedTable.put(pk, dataBody);
// }
//
// */
//// for (int i = 0; i < products.size(); i++) {
//// resultsTableModel.add((new Object[] {element});
//// }
//
// i++;
// if(i == udpClient.getColumnCount()){
// i = 0;
// receivedTable.put(pk, dataPK);
// dataPK = new ArrayList<Object>();
// }
//
// for (int j = 0; j < receivedTable.size(); j++) {
//
//// resultsTableModel.addRow(new Object[] {receivedTable.get(pk).toString()});
// }
// }
// } catch (EOFException e1) {
// // TODO Auto-generated catch block
// }
//
// System.out.println(receivedTable.toString());
//
//
//
//
//
//
// } catch (Exception e1) {
// // TODO Auto-generated catch block
// e1.printStackTrace();
// }
//
//
//
// }
//
// }
// }
//
// @Override
// public void actionPerformed(ActionEvent e) {
// // TODO Auto-generated method stub
//
// }
// }