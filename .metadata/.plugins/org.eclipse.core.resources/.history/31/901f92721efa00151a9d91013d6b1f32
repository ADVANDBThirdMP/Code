import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import com.sun.javafx.collections.MappingChange.Map;

import javafx.scene.control.ScrollPane;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.HashMap;

import net.miginfocom.swing.MigLayout;

public class RightSplit implements ActionListener  {

	JPanel jPanel = new JPanel();

	private DBConnect db = new DBConnect();
	private MainGUI mainGUI;

	// transactionstable
	private JTabbedPane jTabbedPane = new JTabbedPane();
	private ArrayList<String> transactions = new ArrayList<String>();
	private JTable transactionsTable = new JTable();
	private Object transaction_column_names[] = { "Transactions" };
	private DefaultTableModel transactionsTableModel = new DefaultTableModel(transaction_column_names, 0);
	private JScrollPane transactionsTablePane;

	// resultstable
	private JTable resultTable = new JTable();
	private Object result_column_names[] = { "No Transactions yet" };
	private DefaultTableModel resultsTableModel = new DefaultTableModel(result_column_names, 0);
	private JScrollPane resultsTablePane;

	// buttons
	private final JButton btnCommit = new JButton("COMMIT");
	private final JButton btnRollback = new JButton("ROLLBACK");
	private JButton btnAddTab = new JButton("Add transaction");
	private JButton btnDelTab = new JButton("Delete transaction");

	private ActListener act = new ActListener();

	private JTextField txtNewTransactionsName = new JTextField();

	// menus
	private JMenuBar jMenuBar = new JMenuBar();

	private JMenu transaction = new JMenu("Transactions");
	private JMenu run = new JMenu("Run");
	private JMenu file = new JMenu("File");

	private JMenuItem startClient = new JMenuItem("Start Client");
	private JMenuItem startServer = new JMenuItem("Start Server");

	private JMenuItem closeAll = new JMenuItem("Close All");
	private JMenuItem newTransaction = new JMenuItem("New Transaction");
	private JMenuItem deleteTransaction = new JMenuItem("Delete Transaction");

	private JMenuItem runSelected = new JMenuItem("Run");
	private JMenuItem runAll = new JMenuItem("Run All");
	
	private UDPClient udpClient;
	private UDPServer udpServer;
	
	private final HashMap<String, JTextArea> areas = new HashMap<String, JTextArea>();


	public RightSplit(MainGUI mainGUI) throws Exception {
		
		
		udpClient = new UDPClient();
		this.mainGUI = mainGUI;

		jPanel.setLayout(null);
		jPanel.setSize(1100, 600);

		
		// default transaction
		TransactionTab defaultTransaction = new TransactionTab(mainGUI);
		transactions.add("Default");
		jTabbedPane.addTab("Default", defaultTransaction.getJPanel());

		// for the transactions table
		transactionsTable.setModel(transactionsTableModel);
		transactionsTablePane = new JScrollPane(transactionsTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
		//for results table
		resultTable.setModel(resultsTableModel);
		resultsTablePane = new JScrollPane(resultTable, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		
		// populate transactions table based on transactions arraylist
		populateTransactionsTable();

		btnAddTab.setBounds(805, 54, 115, 23);
		btnDelTab.setBounds(805, 279, 251, 23);
		jTabbedPane.setBounds(7, 33, 788, 235);
		btnRollback.setBounds(405, 279, 390, 52);
		transactionsTablePane.setBounds(805, 88, 251, 180);
		btnCommit.setBounds(7, 279, 390, 52);

		jPanel.add(btnAddTab);

		jPanel.add(btnRollback);
		jPanel.add(btnDelTab);
		jPanel.add(btnCommit);
		jPanel.add(jTabbedPane);
		
		jPanel.add(transactionsTablePane);
		jPanel.add(transactionsTablePane, "cell 0 2 3 1,grow");
		jPanel.add(resultsTablePane);
		resultsTablePane.setBounds(10, 342, 1046, 247);

		jPanel.add(jMenuBar);
		

		
		
		
		txtNewTransactionsName.setBounds(932, 54, 124, 23);
		jPanel.add(txtNewTransactionsName);
		txtNewTransactionsName.setColumns(10);
		jMenuBar.setBounds(0, 0, 1100, 21);


		// for file
		file.add(startClient);
		file.add(startServer);

		// for transaction
		transaction.add(closeAll);
		transaction.add(newTransaction);
		transaction.add(deleteTransaction);

		// for run
		run.add(runAll);
		run.add(runSelected);

		jMenuBar.add(file);
		jMenuBar.add(transaction);
		jMenuBar.add(run);

		btnAddTab.addActionListener(act);
		btnDelTab.addActionListener(act);
		btnCommit.addActionListener(act);
		

	}

	public JPanel getJPanel() {
		return jPanel;
	}

	// populates/refreshes table based on array list
	public void populateTransactionsTable() {
		transactionsTableModel = new DefaultTableModel(transaction_column_names, 0);

		for (int i = 0; i < transactions.size(); i++) {
			transactionsTableModel.addRow(new Object[] { transactions.get(i) });
		}
		transactionsTableModel.fireTableDataChanged();

		transactionsTable.setModel(transactionsTableModel);
		transactionsTablePane.repaint();
		jPanel.repaint();
		jPanel.revalidate();
	}
	
	
	public void newTab(String tab){
	      JPanel p = new JPanel();
	      JTextArea tArea = new JTextArea("transactions here");
	      p.add(tArea);
	      jTabbedPane.add(tab, p);
	      areas.put(tab, tArea);
			
	}

	// adds transactions to arraylist then refreshses table
	public void addTransactions() {
		
	
			JPanel p = new JPanel();
		      JTextArea tArea = new JTextArea("Transactions here");
		      p.add(tArea);
		      jTabbedPane.add(txtNewTransactionsName.getText(), p);
		      areas.put("new", tArea);
		      System.out.println(areas.get("new").getText());
		      
//			jTabbedPane.addTab(txtNewTransactionsName.getText(), new TransactionTab(mainGUI).getJPanel());

		transactions.add(txtNewTransactionsName.getText());

		populateTransactionsTable();
	}

	// deletes transactions and refreshes table
	public void deleteTransactions() {
		int row = transactionsTable.getSelectedRow();
		int column = transactionsTable.getColumnCount();

		int index = jTabbedPane.indexOfTab(transactionsTable.getValueAt(row, 0).toString());
		if (index >= 0) {
			jTabbedPane.removeTabAt(index);
		}
		transactions.remove(transactionsTable.getValueAt(row, 0).toString());
		populateTransactionsTable();
	}
	


	private class ActListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == btnAddTab) {
				addTransactions();
			}

			if (e.getSource() == btnDelTab) {
				deleteTransactions();
			}
			if(e.getSource() == btnCommit){
				System.out.println(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex()));	
//				System.out.println(areas.get(jTabbedPane.getTitleAt(jTabbedPane.getSelectedIndex())).getText());
//				System.out.println(areas.get("new").getText());

			}

		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub

	}
}